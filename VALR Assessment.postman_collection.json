{
	"info": {
		"_postman_id": "1e412646-562a-4108-9195-d23c487b7c1c",
		"name": "VALR Assessment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20162130"
	},
	"item": [
		{
			"name": "Main Challenge",
			"item": [
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "Market Summary for an Invalid currency pair",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC0011 Returns 400 or 404 for invalid pair\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBaseUrl}}/v1/public/:currencyPair/marketsummary",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"public",
										":currencyPair",
										"marketsummary"
									],
									"variable": [
										{
											"key": "currencyPair",
											"value": "Test123",
											"description": " Specify the currency pair for which you want to query the market summary. \n\nExamples: BTCUSDC, ETHUSDC, XRPUSDC, BTCZAR, ETHZAR, ADABTC, ADAETH etc.\n"
										}
									]
								},
								"description": "Get the market summary for a given currency pair."
							},
							"response": [
								{
									"name": "Market Summary for a currency pair",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.valr.com/v1/public/:currencyPair/marketsummary",
											"protocol": "https",
											"host": [
												"api",
												"valr",
												"com"
											],
											"path": [
												"v1",
												"public",
												":currencyPair",
												"marketsummary"
											],
											"variable": [
												{
													"key": "currencyPair",
													"value": "BTCUSDC",
													"description": " Specify the currency pair for which you want to query the market summary. \n\nExamples: BTCUSDC, ETHUSDC, XRPUSDC, BTCZAR, ETHZAR, ADABTC, ADAETH etc.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Sun, 12 Jun 2022 18:09:27 GMT"
										},
										{
											"key": "cache-control",
											"value": "max-age=60,public,max-age=60,public"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "1"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										}
									],
									"cookie": [],
									"body": "{\n  \"currencyPair\": \"BTCUSDC\",\n  \"askPrice\": \"42818\",\n  \"bidPrice\": \"42789\",\n  \"lastTradedPrice\": \"42805\",\n  \"previousClosePrice\": \"42641\",\n  \"baseVolume\": \"1.49816043\",\n  \"quoteVolume\": \"63711.58253431\",\n  \"highPrice\": \"42880\",\n  \"lowPrice\": \"42192\",\n  \"created\": \"2024-01-18T08:26:55.155Z\",\n  \"changeFromPrevious\": \"0.38\",\n  \"markPrice\": \"42817\"\n}"
								}
							]
						},
						{
							"name": "Order Types for an Invalid currency pair (Negative Test)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC0013 Returns 400 or 404 for invalid pair\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBaseUrl}}/v1/public/:currencyPair/ordertypes",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"public",
										":currencyPair",
										"ordertypes"
									],
									"variable": [
										{
											"key": "currencyPair",
											"value": "1234567",
											"description": "Specify the currency pair for which you want to query the order types. \n\nExamples: BTCUSDC, BTCUSDT, XRPUSDC, BTCZAR, ETHZAR, XRPZAR, SOLUSDC, ADABTC, ADAETH etc.\n"
										}
									]
								},
								"description": "Get the order types supported for a given currency pair.\n\nAn array of order types is returned. You can only place an order that is listed in this array for this currency pair.\n\nThe order types supported are as follows:\n\n| Parameter | Description |\n| --- | --- |\n| limit post-only | Place a limit order on the Exchange that will either be added to the order book or, should it match, be cancelled completely. |\n| limit | Place a limit order on the Exchange. |\n| market | Place a market order on the Exchange. |\n| simple | Similar to a market order, but allows for crypto-to-crypto pairs. |\n| stop-loss limit | Place a limit order on the Exchange that limits the downside of holding a particular asset. |\n| take-profit limit | Place a limit order on the Exchange to lock in the growth of holding a particular asset. |"
							},
							"response": [
								{
									"name": "Order Types for a currency pair",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.valr.com/v1/public/:currencyPair/ordertypes",
											"protocol": "https",
											"host": [
												"api",
												"valr",
												"com"
											],
											"path": [
												"v1",
												"public",
												":currencyPair",
												"ordertypes"
											],
											"variable": [
												{
													"key": "currencyPair",
													"value": "BTCUSDC",
													"description": " Specify the currency pair for which you want to query the order types. \n\nExamples: BTCUSDC, BTCUSDT, XRPUSDC, BTCZAR, ETHZAR, XRPZAR, SOLUSDC, ADABTC, ADAETH etc.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Mon, 08 Feb 2021 11:31:23 GMT"
										},
										{
											"key": "cache-control",
											"value": "max-age=60"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "1"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "[\n    \"LIMIT_POST_ONLY\",\n    \"MARKET\",\n    \"LIMIT\",\n    \"SIMPLE\",\n    \"STOP_LOSS_LIMIT\",\n    \"TAKE_PROFIT_LIMIT\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "Market Summary for a currency pair",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC0010 Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"TC0010 Price fields should be numbers\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(Number(jsonData.askPrice)).to.be.a('number');",
									"    pm.expect(Number(jsonData.bidPrice)).to.be.a('number');",
									"});",
									"",
									"pm.test(\"TC0010 Response to contains all expected fields\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('askPrice');",
									"    pm.expect(jsonData).to.have.property('bidPrice');",
									"    pm.expect(jsonData).to.have.property('lastTradedPrice');",
									"    pm.expect(jsonData).to.have.property('highPrice');",
									"    pm.expect(jsonData).to.have.property('lowPrice');",
									"    pm.expect(jsonData).to.have.property('created');",
									"    pm.expect(jsonData).to.have.property('changeFromPrevious');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/v1/public/:currencyPair/marketsummary",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"v1",
								"public",
								":currencyPair",
								"marketsummary"
							],
							"variable": [
								{
									"key": "currencyPair",
									"value": "{{currencyPair}}",
									"description": " Specify the currency pair for which you want to query the market summary. \n\nExamples: BTCUSDC, ETHUSDC, XRPUSDC, BTCZAR, ETHZAR, ADABTC, ADAETH etc.\n"
								}
							]
						},
						"description": "Get the market summary for a given currency pair."
					},
					"response": [
						{
							"name": "Market Summary for a currency pair",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.valr.com/v1/public/:currencyPair/marketsummary",
									"protocol": "https",
									"host": [
										"api",
										"valr",
										"com"
									],
									"path": [
										"v1",
										"public",
										":currencyPair",
										"marketsummary"
									],
									"variable": [
										{
											"key": "currencyPair",
											"value": "BTCUSDC",
											"description": " Specify the currency pair for which you want to query the market summary. \n\nExamples: BTCUSDC, ETHUSDC, XRPUSDC, BTCZAR, ETHZAR, ADABTC, ADAETH etc.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Sun, 12 Jun 2022 18:09:27 GMT"
								},
								{
									"key": "cache-control",
									"value": "max-age=60,public,max-age=60,public"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-frame-options",
									"value": "Deny"
								},
								{
									"key": "content-security-policy",
									"value": "default-src 'none'"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "x-valr-upstream-service-time",
									"value": "1"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains; preload"
								},
								{
									"key": "server",
									"value": "envoy"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
								}
							],
							"cookie": [],
							"body": "{\n  \"currencyPair\": \"BTCUSDC\",\n  \"askPrice\": \"42818\",\n  \"bidPrice\": \"42789\",\n  \"lastTradedPrice\": \"42805\",\n  \"previousClosePrice\": \"42641\",\n  \"baseVolume\": \"1.49816043\",\n  \"quoteVolume\": \"63711.58253431\",\n  \"highPrice\": \"42880\",\n  \"lowPrice\": \"42192\",\n  \"created\": \"2024-01-18T08:26:55.155Z\",\n  \"changeFromPrevious\": \"0.38\",\n  \"markPrice\": \"42817\"\n}"
						}
					]
				},
				{
					"name": "Order Types for a currency pair",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC0012 Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"TC0012 Response is an array\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"TC0012 For Each item is a valid order type\", function () {",
									"    let jsonData = pm.response.json();",
									"    const validOrderTypes = [ \"LIMIT_POST_ONLY\",",
									"    \"SIMPLE\",",
									"    \"MARKET\",",
									"    \"LIMIT\",",
									"    \"STOP_LOSS_LIMIT\",",
									"    \"TAKE_PROFIT_LIMIT\"];",
									"    jsonData.forEach(type => {",
									"        pm.expect(validOrderTypes).to.include(type);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/v1/public/:currencyPair/ordertypes",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"v1",
								"public",
								":currencyPair",
								"ordertypes"
							],
							"variable": [
								{
									"key": "currencyPair",
									"value": "{{currencyPair}}",
									"description": "Specify the currency pair for which you want to query the order types. \n\nExamples: BTCUSDC, BTCUSDT, XRPUSDC, BTCZAR, ETHZAR, XRPZAR, SOLUSDC, ADABTC, ADAETH etc.\n"
								}
							]
						},
						"description": "Get the order types supported for a given currency pair.\n\nAn array of order types is returned. You can only place an order that is listed in this array for this currency pair.\n\nThe order types supported are as follows:\n\n| Parameter | Description |\n| --- | --- |\n| limit post-only | Place a limit order on the Exchange that will either be added to the order book or, should it match, be cancelled completely. |\n| limit | Place a limit order on the Exchange. |\n| market | Place a market order on the Exchange. |\n| simple | Similar to a market order, but allows for crypto-to-crypto pairs. |\n| stop-loss limit | Place a limit order on the Exchange that limits the downside of holding a particular asset. |\n| take-profit limit | Place a limit order on the Exchange to lock in the growth of holding a particular asset. |"
					},
					"response": [
						{
							"name": "Order Types for a currency pair",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.valr.com/v1/public/:currencyPair/ordertypes",
									"protocol": "https",
									"host": [
										"api",
										"valr",
										"com"
									],
									"path": [
										"v1",
										"public",
										":currencyPair",
										"ordertypes"
									],
									"variable": [
										{
											"key": "currencyPair",
											"value": "BTCUSDC",
											"description": " Specify the currency pair for which you want to query the order types. \n\nExamples: BTCUSDC, BTCUSDT, XRPUSDC, BTCZAR, ETHZAR, XRPZAR, SOLUSDC, ADABTC, ADAETH etc.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Mon, 08 Feb 2021 11:31:23 GMT"
								},
								{
									"key": "cache-control",
									"value": "max-age=60"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-frame-options",
									"value": "Deny"
								},
								{
									"key": "content-security-policy",
									"value": "default-src 'none'"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "x-valr-upstream-service-time",
									"value": "1"
								},
								{
									"key": "server",
									"value": "envoy"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								}
							],
							"cookie": [],
							"body": "[\n    \"LIMIT_POST_ONLY\",\n    \"MARKET\",\n    \"LIMIT\",\n    \"SIMPLE\",\n    \"STOP_LOSS_LIMIT\",\n    \"TAKE_PROFIT_LIMIT\"\n]"
						}
					]
				}
			]
		},
		{
			"name": "Optional Challenge",
			"item": [
				{
					"name": "Functional Tests",
					"item": [
						{
							"name": "Market Order : Side - BUY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"// ⏱ Subtract 5 seconds (5000 ms) from current time to avoid being \"too late\"",
											"const timestamp = (Date.now() - 5000).toString();",
											"",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"",
											"// Set the body exactly (avoid relying on what's typed in manually)",
											"const rawBody = {",
											"    \"side\": \"BUY\",",
											"    \"baseAmount\": \"0.01\",",
											"    \"pair\": \"BTCZAR\",",
											"    \"customerOrderId\": \"1234\",",
											"    \"allowMargin\": \"false\"",
											"};",
											"",
											"const body = JSON.stringify(rawBody);",
											"",
											"// Overwrite request body to match signature",
											"pm.request.body.update(body);",
											"",
											"// Create the message to sign",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate the signature",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"// Save to environment",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);",
											"",
											"// For debugging",
											"console.log(\"timestamp:\", timestamp);",
											"console.log(\"body:\", body);",
											"console.log(\"message:\", message);",
											"console.log(\"signature:\", signature);",
											"",
											"console.log(\"apiSecret length:\", apiSecret.length);",
											"console.log(\"apiSecret first 10 chars:\", apiSecret.substring(0, 10));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC001 Status code is 202\", function () {",
											"    pm.expect(pm.response.code).to.be(202);",
											"});",
											"",
											"pm.test(\"TC001 Contains orderId\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"TC001 Order placed successfully\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.side).to.eql(\"BUY\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{signature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{timestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"side\":\"BUY\",\"baseAmount\":\"0.01\",\"pair\":\"BTCZAR\",\"customerOrderId\":\"1234\",\"allowMargin\":\"false\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						},
						{
							"name": "Market Order : Side - SELL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"const timestamp = Date.now().toString();",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"const body = JSON.stringify(pm.request.body.raw || '');",
											"",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate signature using CryptoJS",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC002 Status code is 202\", function () {",
											"    pm.expect(pm.response.code).to.be(202);",
											"});",
											"",
											"pm.test(\"TC002 Contains orderId\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"TC002 Order placed successfully\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.side).to.eql(\"SELL\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{requestSignature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{requestTimestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"ETHZAR\",\n\t\"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}"
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						},
						{
							"name": "Market Order : QuoteAmount for side - SELL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"const timestamp = Date.now().toString();",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"const body = JSON.stringify(pm.request.body.raw || '');",
											"",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate signature using CryptoJS",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC003 Status code is 202\", function () {",
											"    pm.expect(pm.response.code).to.be(202);",
											"});",
											"",
											"pm.test(\"TC003 Contains orderId\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"TC003 Order placed successfully\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.side).to.eql(\"SELL\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{requestSignature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{requestTimestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"0.01\",\n\t\"pair\": \"ETHZAR\",\n\t\"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}"
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						},
						{
							"name": "Market Order : BaseAmount for side - BUY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"const timestamp = Date.now().toString();",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"const body = JSON.stringify(pm.request.body.raw || '');",
											"",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate signature using CryptoJS",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC004 Status code is 202\", function () {",
											"    pm.expect(pm.response.code).to.be(202);",
											"});",
											"",
											"pm.test(\"TC004 Contains orderId\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"TC005 Order placed successfully\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.side).to.eql(\"BUY\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{requestSignature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{requestTimestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}"
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						},
						{
							"name": "Market Order : pair - BTCZAR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"const timestamp = Date.now().toString();",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"const body = JSON.stringify(pm.request.body.raw || '');",
											"",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate signature using CryptoJS",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC005 Status code is 202\", function () {",
											"    pm.expect(pm.response.code).to.be(202);",
											"});",
											"",
											"pm.test(\"TC005 Contains orderId\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"TC005 Order placed successfully\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.currencyPair).to.eql(\"BTCZAR\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{requestSignature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{requestTimestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}"
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						},
						{
							"name": "Market Order : pair - ETHZAR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"const timestamp = Date.now().toString();",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"const body = JSON.stringify(pm.request.body.raw || '');",
											"",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate signature using CryptoJS",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC006 Status code is 202\", function () {",
											"    pm.expect(pm.response.code).to.be(202);",
											"});",
											"",
											"pm.test(\"TC006 Contains orderId\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"TC006 Order placed successfully\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.currencyPair).to.eql(\"ETHZAR\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{requestSignature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{requestTimestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"ETHZAR\",\n\t\"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}"
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						},
						{
							"name": "Market Order : pair - XRPZAR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"const timestamp = Date.now().toString();",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"const body = JSON.stringify(pm.request.body.raw || '');",
											"",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate signature using CryptoJS",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC007 Status code is 202\", function () {",
											"    pm.expect(pm.response.code).to.be(202);",
											"});",
											"",
											"pm.test(\"TC007 Contains orderId\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"TC007 Order placed successfully\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.currencyPair).to.eql(\"XRPZAR\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{requestSignature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{requestTimestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"XRPZAR\",\n\t\"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}"
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "Market Order - Invalid Base Amount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"const timestamp = Date.now().toString();",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"const body = JSON.stringify(pm.request.body.raw || '');",
											"",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate signature using CryptoJS",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC008 Invalid base amount\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"    let json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"errorCode\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{requestSignature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{requestTimestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"-0.01\",\n\t\"pair\": \"BTCUSDT\",\n\t\"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}"
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						},
						{
							"name": "Market Order - Invalid Pair",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.environment.get(\"yourApiKey\");",
											"const apiSecret = pm.environment.get(\"yourApiSecret\");",
											"const timestamp = Date.now().toString();",
											"const method = \"POST\";",
											"const path = \"/v1/orders/market\";",
											"const body = JSON.stringify(pm.request.body.raw || '');",
											"",
											"const message = timestamp + method + path + body;",
											"",
											"// Generate signature using CryptoJS",
											"const signature = CryptoJS.HmacSHA512(message, apiSecret).toString(CryptoJS.enc.Hex);",
											"",
											"pm.environment.set(\"timestamp\", timestamp);",
											"pm.environment.set(\"signature\", signature);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"TC009 Invalid pair\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"    let json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"errorCode\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-VALR-API-KEY",
										"value": "{{yourApiKey}}",
										"description": "Your API Key",
										"type": "text"
									},
									{
										"key": "X-VALR-SIGNATURE",
										"value": "{{requestSignature}}",
										"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
										"type": "text"
									},
									{
										"key": "X-VALR-TIMESTAMP",
										"value": "{{requestTimestamp}}",
										"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"TEST123\",\n\t\"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}"
								},
								"url": {
									"raw": "{{apiBaseUrl}}/v1/orders/market",
									"host": [
										"{{apiBaseUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"market"
									]
								},
								"description": "Create a new market order.\n\nWhen the response is `202 Accepted`, you can either use the `Order Status` REST API or use WebSocket API to receive updates about this order.\n\nExample request body:\n\n``` json\n{\n    \"side\": \"SELL\",\n    \"baseAmount\": \"0.100000\",\n    \"pair\": \"BTCZAR\",\n    \"customerOrderId\": \"1234\",\n    \"allowMargin\": \"false\"\n}\n\n ```\n\n| Parameter | Description |\n| --- | --- |\n| side (required) | `BUY` or `SELL` |\n| baseAmount / quoteAmount (required) | Either the `baseAmount` or `quoteAmount` must be provided.  <br>**Please note**:  <br>1\\. If `quoteAmount` is specified for a SELL order, your account will be credited with `quoteAmount` minus taker fees.  <br>2\\. If `baseAmount` is specified for a BUY order, your account will be credited with `baseAmount` minus taker fees.  <br>3\\. If `baseAmount` is provided, it will be truncated to `baseDecimalPlaces` of the currency pair. |\n| pair (required) | Can be `BTCZAR`, `ETHZAR` or `XRPZAR`. |\n| customerOrderId (optional) | Alphanumeric value. See below for explanation. |\n| allowMargin (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| reduceOnly (optional) | `true` or `false`. Default value is `false`. See below for explanation. |\n| conditionalOrderData (optional) | Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order. See below for explanation. |\n\n**Notes**\n\n- **`customerOrderId`**:  \n    Optional field for tracking orders using your internal system. It supports alphanumeric characters and dashes (\"-\"), with a 50-character limit. Special characters are not allowed. The `customerOrderId` must be **unique across all open orders** for a given account. Reusing an `id` from an active order will prevent the new order from being placed (use the order status API to check an order’s status).\n\n- **`allowMargin`**:  \n    Set to `true` for margin/leverage trades. Only subaccounts can trade on margin, and each must be enabled individually via the account/status API.\n\n- **`reduceOnly`**:\n- Set to `true` for Perpetual Futures order(s) where the limit order should only ever reduce a position, never create or increase.\n\n- **`conditionalOrderData`**:  \n    Conditional orders are used to add Take Profit and Stop Loss (TPSL) conditions to manage your futures Perpetual Futures order(s). These fields are used to define the conditions under which the TPSL will trigger, and how the order will be placed when triggered.\n\n    The key thing to note is that you do not need the `linkedOrderId` or `pair` because it refers to the limit order that you are placing.\n\n    More information can be found in the [Conditional Orders Section](https://docs.valr.com/#8ab83b51-a0f7-405e-bc6b-b7e7f049544b).\n\n\n**Fee currency**\n\nWhen you place a market order, you will be charged the \"Taker fee\" on the trade.\n\n- As a Taker, if you are Buying BTC with ZAR, your fee will be charged in BTC\n    \n- As a Taker, if you are Selling BTC for ZAR, your fee will be charged in ZAR\n    \n\n**PLEASE NOTE**: When you receive a response with an id, it does not always mean that the order has been placed. When the response is `202 Accepted`, you can use the Order Status REST API or use WebSocket API to receive the status of this order. The reasons why an order could fail are as follows:\n\n- Insufficient balance in your account.\n    \n- If you're using a non-unique `customerOrderId`.\n    \n- If you set `postOnly` flag to true, but your order would have matched immediately.\n    \n- Self trading: If your order matches against your own order (on the other side).\n    \n- Insufficient liquidity: If you're placing an order and there isn't liquidity to fulfill the order."
							},
							"response": [
								{
									"name": "BUY - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate request signature"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"baseAmount\": \"0.100000\",\n\t\"pair\": \"BTCZAR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 20 Apr 2019 14:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=0; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4ca7bb07cf92ac5a-JNB"
										}
									],
									"cookie": [],
									"body": "{\n\t/* NOTE : When you receive this response with an id,\n\tit does not always mean that the order has been placed. \n\tWhen the response is 202 Accepted, you can either use the \n\tOrder Status REST API or use WebSocket API to receive status\n\tupdate about this order. */\n    \"id\": \"9070979e-042f-47d9-b36e-a4b2669fa385\"\n}"
								},
								{
									"name": "SELL - With Base Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"baseAmount\": \"0.01\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 14:48:26 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "47"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"a7426775-9086-442b-8641-ab52283d98ee\"\n}"
								},
								{
									"name": "BUY - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"BUY\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 28 May 2019 15:12:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "Deny"
										},
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'none'"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "4de12aa67b61563d-JNB"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"696b582d-7e21-4988-be6c-04bcdce97955\"\n}"
								},
								{
									"name": "SELL - With Quote Amount",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key",
												"type": "text"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature.",
												"type": "text"
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"side\": \"SELL\",\n\t\"quoteAmount\": \"10\",\n\t\"pair\": \"BTCZAR\",\n\t\"customerOrderId\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Fri, 14 Aug 2020 13:58:49 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "2"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "clear"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"d7d02ad8-b78d-40c1-a607-8fd515f19b50\"\n}"
								},
								{
									"name": "BUY - With Conditional Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-VALR-API-KEY",
												"value": "{{yourApiKey}}",
												"description": "Your API Key"
											},
											{
												"key": "X-VALR-SIGNATURE",
												"value": "{{requestSignature}}",
												"description": "Request Signature generated for this request. See section about **Authentication** above to learn how to generate this request signature."
											},
											{
												"key": "X-VALR-TIMESTAMP",
												"value": "{{requestTimestamp}}",
												"description": "The same timestamp used to generate the request signature (in Unix epoch time format, in milliseconds). \n\nExample: If the current date and time is `December 28, 2019 00:00:00 UTC`. then the Unix epoch time would be `1577491200000`. Note that this timestamp is in milliseconds."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"side\": \"BUY\",\n    \"baseAmount\": \"0.2\",\n    \"pair\": \"AVAXUSDTPERP\",\n    \"customerOrderId\": \"MarketSell\",\n    \"allowMargin\": \"false\",\n    \"conditionalOrderData\": {\n        \"quantity\": \"0.2\",\n        \"triggerType\": \"LAST_TRADED\",\n        \"takeProfitTriggerPrice\": \"44.74\",\n        \"takeProfitOrderPrice\": \"44.8\",\n        \"stopLossTriggerPrice\": \"30.1\",\n        \"stopLossOrderPrice\": \"30\",\n        \"customerOrderId\": \"MarketConditionalByLastTraded\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBaseUrl}}/v1/orders/market",
											"host": [
												"{{apiBaseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												"market"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 16 Oct 2024 08:06:42 GMT"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-frame-options",
											"value": "Deny"
										},
										{
											"key": "content-security-policy",
											"value": "default-src 'none'"
										},
										{
											"key": "content-type",
											"value": "application/json"
										},
										{
											"key": "x-valr-upstream-service-time",
											"value": "48"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15552000; includeSubDomains; preload"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "server",
											"value": "envoy"
										},
										{
											"key": "Via",
											"value": "1.1 google"
										},
										{
											"key": "Alt-Svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"68eadc21-6bb4-4219-a948-3a01d160a607\",\n    \"customerOrderId\": \"MarketSell\",\n    \"conditionalOrderId\": \"0aabd961-ae98-4e5e-bc93-2cf072c6b510\"\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "b9fb68df5485639d03c3171cf6e49b89e52fd78d5c313819b9c592b59c689f33",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// /* Pre-requisite",
					"// ==================",
					"// 1) Create a new Environment in Postman.",
					"// 2) Add two variables: \"yourApiKey\" and \"yourApiSecret\" to the Environment. Provide appropriate initial values for these variables. That is, the Api Key and Api Secret for your account.",
					"// 3) Enable this environment for your requests.",
					"// 4) For each request, this script generates the following two new environment variables:",
					"",
					"// * requestSignature",
					"// * requestTimestamp",
					"",
					"// 5) Ensure that the following three headers are sent with every request:",
					"",
					"// X-VALR-API-KEY: {{yourApiKey}}",
					"// X-VALR-SIGNATURE: {{requestSignature}}",
					"// X-VALR-TIMESTAMP: {{requestTimestamp}}",
					"",
					"// Subaccounts",
					"// ==================",
					"// To perform a request impersonating a specific subaccount, the subaccount ID must be provided. The ID can be determined by using `Account/Subaccounts/Retrieve Subaccounts`. Once the ID is determined, it can be added to the request by either adding the `X-VALR-SUB-ACCOUNT-ID` header, with the ID as value, to the request directly, or by adding the variable {{yourSubAccountId}} to the Postman Environment. If both are provided, the header has precedence. If the variable is provided it will be added to every request.",
					"",
					"// Please note: Requests that may only be performed on the Primary account will fail with a \"401: Unauthorized\" response if the subaccount ID is included.",
					"",
					"// */",
					"",
					"// var YOUR_API_KEY = postman.getEnvironmentVariable('yourApiKey');",
					"// var YOUR_API_SECRET = postman.getEnvironmentVariable('yourApiSecret');",
					"",
					"// var subAccountHeader = pm.request.headers.find((header) => header.key === 'X-VALR-SUB-ACCOUNT-ID' && !header.disabled)",
					"// var YOUR_SUB_ACCOUNT_ID = subAccountHeader ? subAccountHeader.value ",
					"//         : postman.getEnvironmentVariable('yourSubAccountId');",
					"",
					"// var requestTimestamp = (new Date()).getTime();",
					"",
					"// function getPath(url) {",
					"//     var pathRegex = /(?:.+?\\:\\/\\/.+?)?(\\/.+)/;",
					"//     var result = url.match(pathRegex);",
					"//     return result && result.length > 1 ? result[1] : ''; ",
					"// }",
					"",
					" ",
					"// function getHmacDigest(httpMethod, requestUrl, requestBody) {",
					"//     var requestPath = getPath(requestUrl.toString());",
					"//     if (httpMethod == 'GET' || !requestBody) {",
					"//         requestBody = ''; ",
					"//     } ",
					"",
					"//     var requestData = [requestTimestamp, httpMethod.toUpperCase(), requestPath, requestBody, YOUR_SUB_ACCOUNT_ID].join(\"\");",
					"//     var hmacDigest = CryptoJS.enc.Hex.stringify(CryptoJS.HmacSHA512(requestData, YOUR_API_SECRET));",
					"//     return hmacDigest;",
					"// }",
					" ",
					"// postman.setEnvironmentVariable('requestSignature', getHmacDigest(pm.request.method, pm.request.url, pm.request.body));",
					"// postman.setEnvironmentVariable('requestTimestamp', requestTimestamp);",
					"",
					"// if (YOUR_SUB_ACCOUNT_ID && YOUR_SUB_ACCOUNT_ID > 0 && !subAccountHeader) {",
					"//     pm.request.headers.add({ key: 'X-VALR-SUB-ACCOUNT-ID', value: `${YOUR_SUB_ACCOUNT_ID}` });",
					"// }",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiBaseUrl",
			"value": "https://api.valr.com",
			"type": "string"
		},
		{
			"key": "yourApiKey",
			"value": "b9fb68df5485639d03c3171cf6e49b89e52fd78d5c313819b9c592b59c689f33",
			"type": "string"
		},
		{
			"key": "yourApiSecret",
			"value": "4961b74efac86b25cce8fbe4c9811c4c7a787b7a5996660afcc2e287ad864363",
			"type": "string"
		}
	]
}